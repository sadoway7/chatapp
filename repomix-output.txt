This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.dockerignore
.gitignore
Dockerfile
index.html
package.json
public/config.json
public/icon.svg
README.md
src/api/openwebui.js
src/App.jsx
src/commands.js
src/components/ChatInput.jsx
src/components/ChatMessages.jsx
src/components/FileUpload.jsx
src/components/Header.jsx
src/components/SettingsModal.jsx
src/config.json
src/FILE_MAP.md
src/index.css
src/main.jsx
src/utils/config.js
src/utils/error.js
src/utils/message.js
src/utils/message.jsx
vite.config.js

================================================================
Files
================================================================

================
File: .dockerignore
================
node_modules
npm-debug.log
.git
.gitignore

================
File: .gitignore
================
/node_modules
package-lock.json

================
File: Dockerfile
================
# Use Node.js 18 as base
FROM node:18-slim

# Set working directory
WORKDIR /app

# Copy package files first (for better caching)
COPY package*.json ./

# Install dependencies and Vite explicitly
RUN npm install && npm install vite@latest

# Copy the rest of the app
COPY . .

# Build the app
RUN npm run build

# Expose the port (make sure this matches your vite.config.js)
EXPOSE 4173

# Start the application in preview mode
CMD ["npm", "run", "preview", "--", "--host", "0.0.0.0"]

================
File: index.html
================
<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/vite.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        <title>chat.sadoway</title>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="/src/main.jsx"></script>
      </body>
    </html>

================
File: package.json
================
{
  "name": "chat-sadoway",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^4.12.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^3.1.0",
    "vite": "^4.5.2"
  }
}

================
File: public/config.json
================
{
    "openWebUIUrl": "https://open.sadoway.ca",
    "apiKey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijk0ODE3ZWY1LTE2NGYtNGU5ZS04M2VmLTY5MDdhZTViYjdkZiJ9.yh_1x9wXldWOWtKQdDRaHC1vdtwrx5jyfhkamOpd1ms",
    "selectedModel": "phi4-mini:latest"
  }

================
File: public/icon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <!-- Background -->
  <rect width="512" height="512" rx="100" fill="#1a1a1a"/>
  
  <!-- Stylized "L2" -->
  <path d="M 120 140
           L 120 340
           L 220 340"
        stroke="#4f46e5"
        stroke-width="40"
        stroke-linecap="round"
        stroke-linejoin="round"
        fill="none"/>
  
  <!-- Chat/AI element -->
  <path d="M 280 180
           Q 420 180 420 260
           Q 420 340 280 340
           L 260 340
           L 240 380
           L 220 340"
        stroke="#4f46e5"
        stroke-width="40"
        stroke-linecap="round"
        stroke-linejoin="round"
        fill="none"/>
  
  <!-- Decorative dots -->
  <circle cx="300" cy="260" r="12" fill="#4f46e5"/>
  <circle cx="350" cy="260" r="12" fill="#4f46e5"/>
  <circle cx="400" cy="260" r="12" fill="#4f46e5"/>
</svg>

================
File: README.md
================
# chat.sadoway

A web-based interface for interacting with Ollama models, designed to run on Unraid.

## Prerequisites
- Unraid server
- Docker installed on Unraid
- Git access

## Installation Steps

1. **Navigate to appdata Directory**
   ```bash
   cd /mnt/user/appdata
   ```

2. **Clone the Repository**
   ```bash
   git clone https://github.com/sadoway7/chat-sadoway.git
   ```

3. **Configure Domain Access**
   ```bash
   cd chat-sadoway
   nano vite.config.js
   ```
   
   Replace the entire content of the file with:
   ```javascript
   import { defineConfig } from 'vite'
   import react from '@vitejs/plugin-react'

   export default defineConfig({
     plugins: [react()],
     preview: {
       host: '0.0.0.0',
       port: 4173,
       strictPort: true,
       allowedHosts: ['your.domain.com']  // Replace with your domain
     },
     server: {
       host: '0.0.0.0',
       port: 4173,
       strictPort: true,
       allowedHosts: ['your.domain.com']  // Replace with your domain
     }
   })
   ```
   
   Save the file:
   - Press `CTRL + X` to exit
   - Press `Y` to save changes
   - Press `ENTER` to confirm

4. **Configure Docker Container**
   - Open Unraid's Docker tab
   - Click "Add Container"
   - Configure the following settings:

   **Basic Configuration:**
   - Name: `chat-sadoway`
   - Repository: `node:20-slim`
   - Network Type: `Bridge`
   - Console: `Shell`

   **Post Arguments:**
   ```bash
   sh -c "cd /app && rm -rf node_modules package-lock.json && NODE_ENV=development npm install && npm run build && NODE_ENV=production npm run preview -- --host 0.0.0.0"
   ```

   **Path Configuration:**
   - Config Type: `Path`
   - Name: `App Data`
   - Host Path: `/mnt/user/appdata/chat-sadoway`
   - Container Path: `/app`

   **Port Configuration:**
   - Config Type: `Port`
   - Name: `Web UI`
   - Host Port: `4127`
   - Container Port: `4127`
   - Connection Type: `TCP`

5. **Start the Container**
   - Click "Apply" to save the container settings
   - Start the container from the Docker UI

6. **Access the Application**
   - Open your browser
   - Navigate to `http://your.domain.com:4127` or `http://localhost:4127`

7. **Initial Setup**
   - Send the message `settings123!` in the chat to access the settings menu
   - Configure your Ollama URL
   - Select your preferred model (e.g., llama2, mistral)
   - Save your settings

## Notes
- Settings access via `settings123!` is temporary and will be updated in future versions
- The configuration is currently stored in browser cache and needs to be set up locally on first use
- Server-side configuration is planned for future updates
- For cleaner URLs without port numbers, consider using NGINX for domain mapping

## Contributing
This is a hobby project I'm working on in my spare time. Feel free to open issues or submit pull requests, but please note that response times may vary as this is a side project.

## License
Released under MIT License. Feel free to use, modify, and share this project.

## Support
This is a hobby project maintained in my free time. If you find bugs or have questions, feel free to open an issue on GitHub. I'll help when I can, but responses might take some time.

================
File: src/api/openwebui.js
================
export const uploadFile = async (openWebUIUrl, apiKey, file) => {
console.log('API: uploadFile called with file:', file.name, file.type, file.size);
console.log('API: Using URL:', `${openWebUIUrl}/api/v1/files/`);
⋮----
console.log('API: Using authorization header');
⋮----
console.log('API: Creating FormData and appending file');
const formData = new FormData();
formData.append('file', file);
⋮----
console.log('API: Sending fetch request');
const response = await fetch(`${openWebUIUrl}/api/v1/files/`, {
⋮----
console.log('API: Received response with status:', response.status);
⋮----
const errorText = await response.text();
console.error('API: Error response body:', errorText);
throw new Error(`Failed to upload file: ${response.status} ${response.statusText}\n${errorText}`);
⋮----
const data = await response.json();
console.log('API: Successfully parsed response:', data);
⋮----
console.error('API: Error in uploadFile:', error);
handleApiError(error, 'uploadFile');
⋮----
export const fetchModels = async (openWebUIUrl, apiKey) => {
⋮----
const response = await fetch(`${openWebUIUrl}/api/models`, { headers });
⋮----
throw new Error(`Failed to fetch models: ${response.status} ${response.statusText}\n${errorText}`);
⋮----
if (!data || !Array.isArray(data.data)) {
throw new Error('Invalid response format from OpenWebUI API.');
⋮----
handleApiError(error, 'fetchModels');
⋮----
export const sendChatMessage = async (openWebUIUrl, apiKey, model, messages, fileId = null) => {
console.log('API: sendChatMessage called with model:', model);
console.log('API: Messages count:', messages.length);
console.log('API: File ID:', fileId);
⋮----
// Add file reference if provided
⋮----
console.log('API: Adding file reference to payload:', fileId);
⋮----
console.log('API: Sending chat completion request');
const response = await fetch(`${openWebUIUrl}/api/chat/completions`, {
⋮----
body: JSON.stringify(payload),
⋮----
throw new Error(`Failed to send message: ${response.status} ${response.statusText}\n${errorText}`);
⋮----
console.log('API: Successfully parsed response');
⋮----
console.error('API: Error in sendChatMessage:', error);
handleApiError(error, 'sendChatMessage');

================
File: src/App.jsx
================
function App() {
const [messages, setMessages] = useState([]);
const [input, setInput] = useState('');
const [showSettings, setShowSettings] = useState(false);
const [openWebUIUrl, setOpenWebUIUrl] = useState(localStorage.getItem('openWebUIUrl') || config.openWebUIUrl);
const [apiKey, setApiKey] = useState(localStorage.getItem('apiKey') || config.apiKey);
const [models, setModels] = useState([]);
const [selectedModel, setSelectedModel] = useState(localStorage.getItem('selectedModel') || config.selectedModel);
const [fetchError, setFetchError] = useState(null);
const [isTyping, setIsTyping] = useState(false);
const [uploadedFile, setUploadedFile] = useState(null);
const [fileId, setFileId] = useState(null);
const [isUploading, setIsUploading] = useState(false);
const [fileError, setFileError] = useState(null);
const chatContainerRef = useRef(null);
⋮----
useEffect(() => {
const storedOpenWebUIUrl = localStorage.getItem('openWebUIUrl');
const storedApiKey = localStorage.getItem('apiKey');
const storedSelectedModel = localStorage.getItem('selectedModel');
⋮----
setOpenWebUIUrl(storedOpenWebUIUrl);
⋮----
localStorage.setItem('openWebUIUrl', config.openWebUIUrl);
⋮----
setApiKey(storedApiKey);
⋮----
localStorage.setItem('apiKey', config.apiKey);
⋮----
setSelectedModel(storedSelectedModel);
⋮----
localStorage.setItem('selectedModel', config.selectedModel);
⋮----
const initialize = async () => {
⋮----
const fetchedModels = await fetchModels(openWebUIUrl, apiKey);
setModels(fetchedModels.map(model => model.id));
⋮----
handleApiError(error, 'Initialization');
setFetchError(error.message);
⋮----
initialize();
⋮----
const handleFileUpload = async (file) => {
console.log('App: handleFileUpload called with file:', file.name, file.type, file.size);
setUploadedFile(file);
setIsUploading(true);
setFileError(null); // Clear any previous errors
⋮----
console.log('App: Uploading file to API...');
const response = await uploadFile(openWebUIUrl, apiKey, file);
console.log('App: File uploaded successfully:', response);
setFileId(response.id);
⋮----
console.error('App: Error uploading file:', error);
setFileError('Failed to upload file. Please try again.');
setUploadedFile(null);
⋮----
console.log('App: Upload process completed');
setIsUploading(false);
⋮----
const handleFileRemove = () => {
console.log('App: Removing file');
⋮----
setFileId(null);
setFileError(null);
⋮----
const handleFileError = (errorMessage) => {
console.log('App: File error:', errorMessage);
setFileError(errorMessage);
⋮----
const handleSend = async () => {
if (!input.trim()) return;
⋮----
if (input.startsWith('>')) {
const command = input.substring(1).trim();
handleCommand(command, setInput, setShowSettings);
⋮----
isOriginalUserMessage: true, // Add metadata to identify original user messages
hasAttachment: !!fileId, // Add flag to indicate if message has a file attachment
attachmentName: uploadedFile ? uploadedFile.name : null // Add the file name for display
⋮----
setMessages(prevMessages => [...prevMessages, userMessage]);
setInput('');
setIsTyping(true);
⋮----
// Clear the file immediately after sending
const tempFileId = fileId; // Store fileId temporarily for the API call
⋮----
const response = await sendChatMessage(
⋮----
tempFileId // Pass the temporary file ID if available
⋮----
throw new Error('Invalid response format from API.');
⋮----
setMessages(prevMessages => [...prevMessages, assistantMessage]);
⋮----
handleApiError(error, 'handleSendMessage');
⋮----
setMessages(prevMessages => [...prevMessages, errorAssistantMessage]);
⋮----
setIsTyping(false);
⋮----
const handleSettingsChange = (e) => {
⋮----
setOpenWebUIUrl(value);
⋮----
setApiKey(value);
⋮----
setSelectedModel(value);
⋮----
const handleSaveSettings = async (e) => {
e.preventDefault();
localStorage.setItem('openWebUIUrl', openWebUIUrl);
localStorage.setItem('apiKey', apiKey);
localStorage.setItem('selectedModel', selectedModel);
setShowSettings(false);
⋮----
setFetchError(null);
⋮----
handleApiError(error, 'handleSaveSettings');
⋮----
const handleLoadDefaultSettings = () => {
setOpenWebUIUrl(config.openWebUIUrl);
setApiKey(config.apiKey);
setSelectedModel(config.selectedModel);
⋮----
const handleClearChat = () => {
setMessages([]);
⋮----
const handleRetrySend = async (retryMessage, originalUserMessageIndex) => {
⋮----
// Get message history up to the retry point
const messageHistory = messages.slice(0, -1); // Remove last assistant message
⋮----
// Add our retry prompt with metadata
⋮----
// Log for debugging
console.log('Sending retry with original message index:', originalUserMessageIndex);
⋮----
const response = await sendChatMessage(openWebUIUrl, apiKey, selectedModel, messagesWithRetry);
⋮----
isResponseToRetry: messagesWithRetry.some(msg => msg.isRetryPrompt)
⋮----
const handleRetry = (index) => {
console.log('Retry clicked for message at index:', index);
⋮----
// Find the original user message this assistant is responding to
⋮----
// Check if the previous message is a retry prompt
⋮----
// If it's a retry prompt, use its originalUserMessageIndex
⋮----
console.log('Found original message via retry prompt metadata:', originalUserMessageIndex);
⋮----
// If we couldn't find the original message via metadata, search for it
⋮----
console.log('Found original message by searching:', originalUserMessageIndex);
⋮----
// If we still couldn't find an original user message, use the most recent user message
⋮----
console.log('Falling back to most recent user message:', originalUserMessageIndex);
⋮----
console.log('Creating retry prompt for original message:', originalUserMessage);
⋮----
handleRetrySend(retryMessage, originalUserMessageIndex);
⋮----
console.error('Could not find original user message to retry');
⋮----
const handleResize = () => {
⋮----
handleResize(); // Set initial height
⋮----
window.addEventListener('resize', handleResize);
⋮----
window.removeEventListener('resize', handleResize);

================
File: src/commands.js
================
export const handleCommand = (command, setInput, setShowSettings) => {
⋮----
setShowSettings(true);
⋮----
// Add more commands here if needed
⋮----
console.log(`Unknown command: ${command}`);
⋮----
setInput(''); // Clear the input field after handling a command

================
File: src/components/ChatInput.jsx
================
const ChatInput = ({
⋮----
const textareaRef = useRef(null);
const [dropdownOpen, setDropdownOpen] = useState(false);
const dropdownRef = useRef(null);
⋮----
// Auto-resize the textarea based on content
useEffect(() => {
⋮----
// Reset height to auto to get the correct scrollHeight
⋮----
// Calculate new height (capped at 4 lines)
const lineHeight = 24; // Approximate line height in pixels
const maxHeight = lineHeight * 4; // Max height for 4 lines
⋮----
// Set the height to either the scrollHeight or maxHeight, whichever is smaller
textareaRef.current.style.height = `${Math.min(scrollHeight, maxHeight)}px`;
⋮----
// Close dropdown when clicking outside
⋮----
const handleClickOutside = (event) => {
if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
setDropdownOpen(false);
⋮----
document.addEventListener('mousedown', handleClickOutside);
⋮----
document.removeEventListener('mousedown', handleClickOutside);
⋮----
const handleKeyDown = (e) => {
// Send message on Enter (without Shift key)
⋮----
e.preventDefault(); // Prevent default to avoid new line
handleSend();
⋮----
const toggleDropdown = () => {
setDropdownOpen(!dropdownOpen);
⋮----
const selectModel = (model) => {
setSelectedModel(model);
⋮----
onChange={(e) => setInput(e.target.value)}
⋮----
{models.map(model => (
⋮----
onClick={() => selectModel(model)}

================
File: src/components/ChatMessages.jsx
================
const ChatMessages = ({ messages, chatContainerRef, isTyping, handleRetry }) => {
const [showCopyMessage, setShowCopyMessage] = React.useState(false);
// Add ref for the message container
const copyMessageRef = React.useRef(null);
⋮----
React.useEffect(() => {
⋮----
// Ensure the message is visible by scrolling into view
⋮----
copyMessageRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
⋮----
timeoutId = setTimeout(() => {
setShowCopyMessage(false);
⋮----
return () => clearTimeout(timeoutId);
⋮----
const handleCopyMessage = (content) => {
navigator.clipboard.writeText(content)
.then(() => {
setShowCopyMessage(true);
console.log('Text copied to clipboard:', content);
⋮----
.catch(err => {
console.error('Failed to copy text:', err);
⋮----
{/* Move copy message outside the scrollable container */}
⋮----
{messages.map((message, index) => (
⋮----
<div className="message-content">{getSafeMessageContent(message.content)}</div>
⋮----
onClick={() => handleCopyMessage(message.content)}
⋮----
onClick={() => handleRetry(index)}

================
File: src/components/FileUpload.jsx
================
// Constants
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
⋮----
// Document formats
⋮----
// Image formats
⋮----
const FileUpload = ({ onFileUpload, onFileRemove, uploadedFile, isUploading, onError }) => {
const fileInputRef = useRef(null);
⋮----
const handleFileSelect = () => {
console.log('File select button clicked');
fileInputRef.current.click();
⋮----
const handleFileChange = (e) => {
console.log('File input changed', e.target.files);
⋮----
console.log('File selected:', file.name, file.type, file.size);
⋮----
// Check file size
⋮----
console.log('File too large:', file.size);
onError(`File size exceeds the 10MB limit. Your file is ${(file.size / (1024 * 1024)).toFixed(2)}MB.`);
⋮----
// Check file type (by extension)
const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
console.log('File extension:', fileExtension);
if (!ALLOWED_FILE_TYPES.includes(fileExtension)) {
console.log('File type not supported:', fileExtension);
onError(`File type not supported. Allowed types: ${ALLOWED_FILE_TYPES.join(', ')}`);
⋮----
console.log('File passed validation, uploading...');
onFileUpload(file);
⋮----
// Function to get appropriate icon based on file type
const getFileIcon = (fileName) => {
const extension = fileName.split('.').pop().toLowerCase();
⋮----
// Return appropriate icon based on file type
⋮----
accept={ALLOWED_FILE_TYPES.join(',')}
⋮----
<span className="file-icon">{getFileIcon(uploadedFile.name)}</span>
⋮----
? uploadedFile.name.substring(0, 12) + '...'
⋮----
{uploadedFile && uploadedFile.type.startsWith('image/') && (
⋮----
src={URL.createObjectURL(uploadedFile)}

================
File: src/components/Header.jsx
================
const Header = ({ handleClearChat }) => {
⋮----
{/* Dark background circle */}
⋮----
{/* Geometric pattern - inspired by the examples but simplified */}
⋮----
{/* Center circle */}
⋮----
{/* Chunky rays - 8 directions */}
⋮----
{/* Diagonal rays */}
⋮----
{/* Outer ring segments */}

================
File: src/components/SettingsModal.jsx
================
const SettingsModal = ({
⋮----
<div className="settings-content"> {/* Added a container for content */}
⋮----
<div className="input-group"> {/* Group URL input */}
⋮----
<input type="text" id="openWebUIUrl" name="openWebUIUrl" value={openWebUIUrl} onChange={(e) => setOpenWebUIUrl(e.target.value)} />
⋮----
<div className="input-group"> {/* Group API Key input */}
⋮----
<input type="password" id="apiKey" name="apiKey" value={apiKey} onChange={(e) => setApiKey(e.target.value)} />
⋮----
<div className="input-group"> {/* Group Model select */}
⋮----
<select id="selectedModel" name="selectedModel" value={selectedModel} onChange={(e) => setSelectedModel(e.target.value)}>
{models.map(model => <option key={model} value={model}>{model}</option>)}
⋮----
<div className="button-group"> {/* Group buttons */}
⋮----
<button className="close-button" onClick={() => setShowSettings(false)}>Close Without Saving</button>

================
File: src/config.json
================
{
  "openWebUIUrl": "https://open.sadoway.ca",
  "apiKey": "sk-e0519f98601c409e8336dbc292bc6c42",
  "selectedModel": "phi4-mini:latest"
}

================
File: src/FILE_MAP.md
================
# Project File Map

This file provides an overview of all the files in the project and their purposes.

## Application Overview

This application is a web-based chat interface for interacting with language models through the OpenWebUI API. It allows users to send messages and receive responses, configure settings, and manage their chat history.

### Key Features

- Chat Interface: Send and receive messages from a language model.
- Command System: Use commands (e.g., ">settings") for specific actions.
- Settings Panel: Configure API keys, URLs, and models.
- Model Selection: Choose different language models.
- Clear Chat History: Erase all messages.
- Error Handling: Display messages for API errors.
- Copy Message: Copy assistant responses.
- Default Settings: Pre-configured settings.

## File Structure

- **`src/App.jsx`:** Main application component, managing state and UI.
- **`src/components/`:**
    - **`ChatInput.jsx`:** Component for user input and sending messages.
    - **`ChatMessages.jsx`:** Displays chat messages.
    - **`Header.jsx`:** Top bar with title and settings button.
    - **`SettingsModal.jsx`:** Modal for configuring settings.
- **`src/api/openwebui.js`:** Functions for interacting with the OpenWebUI API.
- **`src/commands.js`:** Handles command logic.
- **`src/config.json`:** Default configuration settings.
- **`src/index.css`:** Styles for the application.
- **`src/main.jsx`:** Entry point of the application.
- **`src/utils/`:**
    - **`config.js`:** Utility functions for managing configuration.
    - **`error.js`:** Error handling utilities.
    - **`message.jsx`:** Utility functions for handling message content.
- **`vite.config.js`:** Vite configuration file.
- **`package.json`:** Project dependencies and scripts.
- **`package-lock.json`:** Locked dependency versions.
- **`README.md`:** Project information.
- **`.gitignore`:** Files and folders ignored by Git.

================
File: src/index.css
================
/* Base Reset */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: sans-serif;
  background-color: #e8e8e8;
  background-image:
    radial-gradient(circle at 20% 30%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 20%),
    radial-gradient(circle at 70% 60%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 20%),
    radial-gradient(circle at 40% 80%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 30%),
    radial-gradient(circle at 80% 10%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 30%),
    radial-gradient(circle at 10% 90%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 20%),
    radial-gradient(circle at 90% 80%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 20%),
    radial-gradient(circle at 30% 20%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 30%),
    radial-gradient(circle at 60% 40%, rgba(255, 255, 255, 0.01) 0%, rgba(255, 255, 255, 0) 30%);
  color: #333;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  height: 100vh;
  position: fixed;
  width: 100%;
}

/* Layout */
.container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  max-height: 100vh;
  overflow: hidden;
  position: relative;
}

/* Header */
.chat-header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background: linear-gradient(180deg, rgba(18, 18, 18, 0.95) 0%, rgba(18, 18, 18, 0.85) 80%, rgba(18, 18, 18, 0) 100%); /* Gradient that fades to transparent */
  padding: 0 clamp(12px, 4vw, 24px); /* Adjusted padding */
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: none; /* Removed border completely */
  z-index: 10; /* Increased z-index to ensure it stays on top */
  height: 60px; /* Fixed height for consistency */
  transition: opacity 0.3s ease;
}

.chat-header:hover {
  opacity: 0.98; /* Subtle hover effect */
}

/* Logo container */
.logo-container {
  display: flex;
  align-items: center;
  gap: 10px;
  height: 100%;
}

/* Logo SVG */
.logo-svg {
  width: 32px;
  height: 32px;
  transition: transform 0.3s ease;
}

.logo-container:hover .logo-svg {
  transform: rotate(5deg) scale(1.05);
}

/* Logo text */
.logo-text {
  font-size: clamp(1.1rem, 1.3vw, 1.3rem); /* Slightly larger font */
  font-weight: 600; /* Bolder for business look */
  padding: 0;
  margin: 0;
  color: rgba(229, 229, 229, 0.95); /* Slightly more opaque */
  letter-spacing: 0.03em; /* Increased letter spacing for tech feel */
  display: flex;
  align-items: center;
  height: 100%;
  transition: transform 0.2s ease, opacity 0.2s ease;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.15); /* Enhanced text shadow */
  font-family: 'Segoe UI', 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif; /* Modern tech font stack */
}

/* Dot styling */
.logo-dot {
  color: #ffffff; /* White to match the SVG */
  font-weight: 700;
  margin: 0 1px;
}

.logo-container:hover .logo-text {
  color: rgba(229, 229, 229, 1); /* Full opacity on hover */
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.25); /* Enhanced shadow on hover */
  transform: translateY(-1px); /* Subtle lift effect */
}

.header-buttons {
  display: flex;
  align-items: center;
  gap: 8px; /* Modern gap property instead of margins */
  height: 100%;
}

.header-buttons button {
  background: rgba(42, 42, 42, 0.3); /* More transparent background */
  border: none; /* Removed border completely */
  color: rgba(229, 229, 229, 0.85); /* Semi-transparent text for better blending */
  font-size: 0.9rem;
  cursor: pointer;
  padding: 6px 12px; /* Slightly reduced padding */
  border-radius: 12px; /* Slightly reduced border radius */
  transition: all 0.2s ease; /* Smooth transition for all properties */
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: none; /* Removed shadow completely */
}

.header-buttons button:hover {
  background-color: rgba(255, 255, 255, 0.1); /* Subtle hover effect */
  color: rgba(229, 229, 229, 1); /* Full opacity on hover */
}

.header-buttons button:active {
  background-color: rgba(255, 255, 255, 0.15); /* Slightly more visible when active */
}

.settings-button svg {
  font-size: 1rem;
  transition: transform 0.2s ease;
}

.settings-button:hover svg {
  transform: rotate(15deg); /* Subtle rotation on hover */
}

/* Mobile adjustments for header */
@media (max-width: 480px) {
  .chat-header {
    padding: 0 12px; /* Reduced padding on small screens */
    height: 50px; /* Slightly smaller height on mobile */
    background: linear-gradient(180deg, rgba(18, 18, 18, 0.92) 0%, rgba(18, 18, 18, 0.8) 80%, rgba(18, 18, 18, 0) 100%); /* Slightly adjusted gradient for mobile */
  }
  
  .header-buttons button {
    padding: 5px 10px; /* Smaller padding on mobile */
    font-size: 0.85rem; /* Smaller font on mobile */
  }
  
  .settings-button svg {
    font-size: 0.9rem; /* Smaller icon on mobile */
  }
  
  /* Mobile logo adjustments */
  .logo-svg {
    width: 28px;
    height: 28px;
  }
  
  .logo-text {
    font-size: 1rem;
  }
  
  .logo-container {
    gap: 8px;
  }
  
  .chat-messages {
    top: 35px; /* Reduced to allow content to flow under the header gradient on mobile */
    padding-top: 15px; /* Slightly reduced padding on mobile */
    padding-bottom: 25px; /* Slightly reduced bottom padding on mobile */
    /* Adjusted fade for mobile - both top and bottom */
    mask-image: linear-gradient(
      to bottom,
      transparent 0%,
      black 15px,
      black calc(100% - 100px),
      transparent 100%
    );
    -webkit-mask-image: linear-gradient(
      to bottom,
      transparent 0%,
      black 15px,
      black calc(100% - 100px),
      transparent 100%
    );
  }
}

.chat-messages {
    top: 40px; /* Reduced to allow content to flow under the header gradient */
    bottom: 25px;
    position: fixed;
    overflow-y: scroll;
    overflow-x: hidden;
    left: 50%;
    transform: translateX(-50%);
    width: calc(100% - 1px);
    max-width: 900px;
    bottom: 6px;
    margin-bottom: 6.5rem; /* Increased from 4.9rem to create more space */
    margin-top: 0; /* Removed margin-top since we're using top value */
    -webkit-overflow-scrolling: touch;
    transition: top 0.3s ease; /* Smooth transition when header height changes */
    padding-top: 20px; /* Add padding to ensure first messages don't appear directly under header */
    padding-bottom: 30px; /* Add padding at the bottom for fade-out effect */
    /* Fade in at top and fade out at bottom */
    mask-image: linear-gradient(
        to bottom,
        transparent 0%,
        black 20px,
        black calc(100% - 120px),
        transparent 100%
    );
    -webkit-mask-image: linear-gradient(
        to bottom,
        transparent 0%,
        black 20px,
        black calc(100% - 120px),
        transparent 100%
    );

    /* Webkit scrollbar styles */
    &::-webkit-scrollbar {
        width: 8px;
    }

    &::-webkit-scrollbar-track {
        background: transparent;
    }

    &::-webkit-scrollbar-thumb {
        background: #d1d5db;
        border-radius: 4px;
    }

    &::-webkit-scrollbar-thumb:hover {
        background: #9ca3af;
    }

    /* Firefox scrollbar styles */
    scrollbar-width: thin;
    scrollbar-color: #d1d5db transparent;
}


.message {
  padding: 6px 19px;
  padding-bottom: 10px;
  max-width: 78%;
  clear: both;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  transform: translateY(10px);

  display: block;        /* Changed back to block */
}



.user-message {
  margin-left: auto;     /* Push user messages to right */
  width: fit-content;    /* Fit content width */
  min-width: 40%;
  margin-right: 16px;
  padding-top: 20px;
  align-self: inline-flex;
  margin-top: 8px;
  margin-bottom: 16px;
  font-size: 1.1rem;
  border-radius: 18px 4px 18px 18px; /* Asymmetric corners for character */
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.04),
    0 4px 12px rgba(0, 0, 0, 0.02),
    0 8px 24px rgba(0, 0, 0, 0.01),
    0 0 0 1px rgba(0, 0, 0, 0.02);
  animation: popInuser 0.3s ease forwards;
  background: linear-gradient(135deg, #ffffff, #f8f8f8);
  border-top: 1px solid rgba(255, 255, 255, 0.8); /* Light top border for depth */
  color: rgba(0, 0, 0, 0.85); /* Slightly softer than pure black */
  letter-spacing: 0.01em; /* Subtle letter spacing for better readability */
  transition: box-shadow 0.2s ease, transform 0.2s ease;
  position: relative;
  overflow: hidden;
}

/* Removed blue dot as requested */

.user-message:hover {
  box-shadow:
    0 4px 8px rgba(0, 0, 0, 0.06),
    0 8px 16px rgba(0, 0, 0, 0.04),
    0 0 0 1px rgba(0, 0, 0, 0.02);
  transform: translateY(-1px); /* Subtle lift effect on hover */
}

@keyframes popInuser {
  from {
    opacity: 0;
    transform: translateY(90px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.assistant-message {
  background-color: #f2f2f2;
  padding-top: 20px;
  align-self: flex-start;
  color: rgba(0, 0, 0, 0.85); /* Slightly softer than pure black */
  margin-left: 16px;
  margin-top: 5px;
  margin-bottom: 55px; /* Further increased to provide more space for the action buttons */
  font-size: 1.1rem;
  border-radius: 4px 18px 18px 18px; /* Asymmetric corners for character */
  position: relative;
  animation: popInassistant 0.2s ease forwards;
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.06),
    0 4px 12px rgba(0, 0, 0, 0.04),
    0 8px 24px rgba(0, 0, 0, 0.02),
    0 0 0 1px rgba(0, 0, 0, 0.03);
  letter-spacing: 0.01em; /* Subtle letter spacing for better readability */
  border-left: 2px solid rgba(236, 72, 153, 0.2); /* Subtle hint of pink */
  transition: box-shadow 0.2s ease, transform 0.2s ease;
  background-image:
    linear-gradient(to bottom right, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0));
  overflow: hidden;
}

.assistant-message::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background:
    radial-gradient(circle at 10% 20%, rgba(236, 72, 153, 0.03), transparent 50%),
    radial-gradient(circle at 80% 80%, rgba(59, 130, 246, 0.03), transparent 50%);
  opacity: 0.5;
  pointer-events: none;
}

.assistant-message:hover {
  box-shadow:
    0 4px 8px rgba(0, 0, 0, 0.08),
    0 8px 16px rgba(0, 0, 0, 0.06),
    0 0 0 1px rgba(0, 0, 0, 0.03);
  transform: translateY(-1px); /* Subtle lift effect on hover */
}

@keyframes popInassistant {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.message-content {
  word-wrap: break-word;
  white-space: pre-line;
  margin-bottom: 0.7rem;
  line-height: 1.5; /* Improved line height for readability */
  padding: 0 2px; /* Slight padding for better text spacing */
  text-rendering: optimizeLegibility; /* Better text rendering */
  -webkit-font-smoothing: antialiased; /* Smoother fonts on webkit browsers */
  -moz-osx-font-smoothing: grayscale; /* Smoother fonts on Firefox */
}

.message-actions-container {
  position: absolute;
  bottom: -35px;  /* Moved down even further from the text */
  left: 10px;  /* Position at the bottom left */
  display: flex;
  flex-direction: row;  /* Changed to row for horizontal layout */
  border-radius: 12px;
  padding: 6px 10px;
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(4px);
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.06),
    0 4px 12px rgba(0, 0, 0, 0.04),
    0 8px 24px rgba(0, 0, 0, 0.02),
    0 0 0 1px rgba(0, 0, 0, 0.03);
  z-index: 9000; /* Extremely high z-index to ensure it appears above all other elements */
  border-left: 2px solid rgba(59, 130, 246, 0.2); /* Subtle hint of blue */
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  background-image: linear-gradient(to right, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.95));
  pointer-events: auto !important; /* Ensure clicks are registered */
}

/* Ensure the assistant message doesn't clip the action buttons */
.assistant-message {
  overflow: visible !important;
}

.message-actions-container:hover {
  transform: translateY(-2px);
  box-shadow:
    0 4px 8px rgba(0, 0, 0, 0.08),
    0 8px 16px rgba(0, 0, 0, 0.06),
    0 0 0 1px rgba(0, 0, 0, 0.03);
}

@media (max-width: 500px) {
  .message-actions-container {
    padding: 4px 6px; /* More compact on mobile */
  }
}

/* Media queries for different screen sizes */
@media (max-width: 1200px) {
  .message-actions-container {
    left: 10px;
  }
}

@media (max-width: 992px) {
  .message-actions-container {
    left: 10px;
  }
}

@media (max-width: 768px) {
  .message-actions-container {
    bottom: -27px; /* Adjusted for medium screens, moved down further */
    left: 10px;
  }
  
  .assistant-message {
    margin-bottom: 50px; /* Significantly increased for better spacing */
  }
}

@media (max-width: 576px) {
  .message-actions-container {
    bottom: -25px; /* Adjusted for small screens, moved down further */
    left: 10px;
  }
  
  .assistant-message {
    margin-bottom: 55px; /* Further increased for small screens */
  }
}

/* For very small screens */
@media (max-width: 375px) {
  .message-actions-container {
    bottom: -22px; /* Further adjusted for very small screens, moved down further */
    left: 8px;
    padding: 3px 5px; /* Even more compact for very small screens */
  }
  
  .assistant-message {
    margin-bottom: 60px; /* Maximum spacing for very small screens */
  }
  
  .copy-button,
  .retry-button {
    width: 24px;
    height: 24px;
    margin: 0 2px;
  }
  
  .message-actions {
    gap: 4px; /* Minimal gap for very small screens */
  }
}

.message-actions {
  display: flex;
  flex-direction: row;  /* Changed to row for horizontal layout */
  gap: 10px;  /* Increased gap for better spacing between buttons */
}

.copy-button,
.retry-button {
  background-color: rgba(255, 255, 255, 0.9);
  border: none;
  border-radius: 50%;
  cursor: pointer;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 28px;
  height: 28px;
  transition: all 0.2s ease;
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.06),
    0 4px 8px rgba(0, 0, 0, 0.03),
    0 0 0 1px rgba(0, 0, 0, 0.02);
  margin: 0 4px; /* Increased horizontal spacing */
  position: relative;
  overflow: hidden;
}

.copy-button {
  background-color: rgba(255, 255, 255, 0.9);
}

.retry-button {
  background-color: rgba(255, 255, 255, 0.9);
  position: relative;
}

.retry-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle at top right, rgba(125, 211, 252, 0.15), transparent 70%);
  opacity: 1;
  z-index: -1;
}

.copy-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle at top left, rgba(236, 72, 153, 0.15), transparent 70%);
  opacity: 1;
  z-index: -1;
}

.copy-button::after,
.retry-button::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: 1;
}

.copy-button:hover,
.retry-button:hover {
  background-color: #ffffff;
  transform: translateY(-2px);
  box-shadow:
    0 4px 8px rgba(0, 0, 0, 0.08),
    0 8px 16px rgba(0, 0, 0, 0.04),
    0 0 0 1px rgba(0, 0, 0, 0.02);
}

.copy-button:hover::after,
.retry-button:hover::after {
  opacity: 0.6;
}

.copy-button:active,
.retry-button:active {
  transform: translateY(0);
}

.copy-button svg,
.retry-button svg {
  font-size: 0.9rem;
  color: #333;
}

/* Mobile adjustments - moved to smaller breakpoint */
@media (max-width: 500px) {
  .copy-button,
  .retry-button {
    width: 26px;
    height: 26px;
    margin: 0 3px; /* Slightly increased horizontal spacing */
  }
  
  .copy-button svg,
  .retry-button svg {
    font-size: 1rem;
  }
  
  .message-actions {
    gap: 6px; /* Reduced gap for mobile */
  }
}

.typing-indicator {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 16px auto 60px; /* Increased bottom margin to avoid being covered by input */
  animation: slideIn 0.5s ease forwards;
  opacity: 0; /* Start hidden */
  width: 70px;
  height: 24px;
  padding: 0 8px;
  border-radius: 16px;
  background: rgba(42, 42, 42, 0.8);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  backdrop-filter: blur(4px);
  z-index: 10; /* Ensure it appears above other elements */
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Dots container */
.typing-indicator::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 20px;
  background: linear-gradient(90deg,
    rgba(255, 255, 255, 0.03) 0%,
    rgba(255, 255, 255, 0.06) 50%,
    rgba(255, 255, 255, 0.03) 100%);
  animation: shimmer 1.5s infinite;
  z-index: 0;
}

@keyframes shimmer {
  0% {
    background-position: -80px 0;
  }
  100% {
    background-position: 80px 0;
  }
}

/* Create three dots */
.typing-indicator span {
  position: relative;
  display: inline-block;
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background: #ffffff;
  margin: 0 3px;
  transform: translateY(0);
  z-index: 1;
}

/* First dot animation */
.typing-indicator span:nth-child(1) {
  animation: bounce 1s infinite 0s;
}

/* Second dot animation */
.typing-indicator span:nth-child(2) {
  animation: bounce 1s infinite 0.15s;
}

/* Third dot animation */
.typing-indicator span:nth-child(3) {
  animation: bounce 1s infinite 0.3s;
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(0);
    background: #ffffff;
  }
  50% {
    transform: translateY(-5px);
    background: #ff9800;
  }
}

/* Mobile adjustments */
@media (max-width: 768px) {
  .typing-indicator {
    margin-bottom: 70px; /* More space on mobile */
    width: 60px; /* Slightly smaller on mobile */
    height: 22px;
  }
  
  .typing-indicator span {
    width: 5px;
    height: 5px;
    margin: 0 2px;
  }
}

/* Small mobile adjustments */
@media (max-width: 480px) {
  .typing-indicator {
    margin-bottom: 80px; /* Even more space on small mobile */
  }
}

/* Very small screens */
@media (max-width: 375px) {
  .typing-indicator {
    margin-bottom: 90px; /* Maximum space on very small screens */
  }
}

/* Chat Input */
.chat-input-container {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: calc(100% - 40px);
    max-width: 600px;
    background-color: rgba(42, 42, 42, 0.92); /* More transparent for better blending */
    padding: 6px 6px; /* Minimal padding for compact appearance */
    border-radius: 22px; /* More rounded to match send button */
    box-shadow:
        0 1px 4px rgba(0, 0, 0, 0.25),
        0 2px 6px rgba(0, 0, 0, 0.15),
        0 4px 8px rgba(0, 0, 0, 0.08),
        0 -3px 6px rgba(0, 0, 0, 0.12), /* Reduced upward shadow for better fade effect */
        inset 0 1px 1px rgba(255, 255, 255, 0.03);
    z-index: 20; /* Adjusted to be lower than message-actions-container (50) */
    transition: box-shadow 0.3s cubic-bezier(.25,.8,.25,1), height 0.2s ease, opacity 0.3s ease; /* Added opacity transition */
    display: flex;
    flex-direction: column; /* Changed to column to allow for options row at bottom */
    min-height: 34px; /* Further reduced minimum height */
    backdrop-filter: blur(5px); /* Added blur effect for content behind */
    /* Add subtle gradient to top edge to blend with faded messages */
    border: 1px solid rgba(255, 255, 255, 0.03);
    border-top: none;
    /* Gradient overlay to blend with the faded messages */
    &::before {
        content: '';
        position: absolute;
        top: -40px;
        left: 0;
        right: 0;
        height: 40px;
        background: linear-gradient(to bottom, rgba(18, 18, 18, 0), rgba(18, 18, 18, 0.5));
        pointer-events: none;
        z-index: -1;
    }
}

/* Main input area with textarea and send button */
.chat-input-container .input-row {
    display: flex;
    width: 100%;
    align-items: flex-end; /* Changed to flex-end to align items at the bottom */
    position: relative;
    min-height: 34px; /* Further reduced minimum height */
    margin-bottom: 2px; /* Added small bottom margin */
}

/* Input footer with model selector and send button */
.input-footer {
    display: flex;
    align-items: center;
    padding-top: 0px;
    margin: 0 6px 4px; /* Added bottom margin */
    gap: 8px; /* Add gap between elements */
}

/* Spacer to push elements to the sides */
.spacer {
    flex: 1;
}

/* Custom dropdown styling */
.custom-dropdown {
    position: relative;
    display: inline-block;
    margin-right: 4px; /* Add a small margin from the right edge */
    margin-bottom: 4px; /* Add bottom margin */
}

.dropdown-toggle {
    background-color: transparent;
    border: none;
    border-radius: 20px;
    color: #777;
    font-size: 0.8rem;
    padding: 4px 10px 6px; /* Match file upload button padding */
    cursor: pointer;
    outline: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    transition: background-color 0.2s ease;
    min-width: 150px; /* Reduced min-width */
    text-align: center;
    height: 28px;
}

.dropdown-toggle:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.dropdown-menu {
    position: absolute;
    bottom: 100%;
    left: 0;
    margin-bottom: 6px;
    background-color: #2a2a2a;
    border-radius: 20px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
    z-index: 110; /* Increased to be higher than send button (101) */
    min-width: 290px;
    overflow: hidden;
    padding: 6px;
}

.dropdown-item {
    display: block;
    width: 100%;
    padding: 12px 16px;
    text-align: left;
    background: none;
    border: none;
    border-radius: 16px;
    color: #dedede;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    margin-bottom: 4px;
}

.dropdown-item:last-child {
    margin-bottom: 0;
}

.dropdown-item:hover {
    background-color: #3a3a3a;
}

.dropdown-item.active {
    background-color: #3a3a3a;
    font-weight: 500;
}

/* Adjust chat input container padding for the footer */
.chat-input-container {
    padding-bottom: 0px; /* Minimal padding */
}

.chat-input-container:hover {
      box-shadow:
        0 2px 6px rgba(0, 0, 0, 0.35),
        0 4px 8px rgba(0, 0, 0, 0.25),
        0 6px 12px rgba(0, 0, 0, 0.15),
        0 -4px 8px rgba(0, 0, 0, 0.15), /* Reduced upward shadow for better fade effect */
        inset 0 1px 2px rgba(255, 255, 255, 0.1);
      transition: box-shadow 0.3s ease;
}


/* Add media query for small screens */
@media (max-width: 768px) {
    .chat-input-container {
        width: calc(100% - 60px);
        bottom: 25px;
    }
    
    .chat-input {
        padding: 8px 12px;
        max-height: 88px; /* Slightly smaller max height on mobile */
    }
    
    .chat-messages {
        margin-bottom: 7rem; /* Increased spacing on mobile */
    }
    
    .send-button {
        /* No need to override position on mobile, the percentage-based positioning works for all sizes */
    }
}

/* Even more padding for very small screens */
@media (max-width: 480px) {
    .chat-input-container {
        width: calc(100% - 60px);
        bottom: 25px;
        padding: 8px; /* Slightly smaller padding */
    }
    
    .chat-input {
        padding: 6px 10px;
        font-size: clamp(1rem, 2vw, 0.8rem); /* Slightly smaller font */
    }
    
    .chat-messages {
        margin-bottom: 7.5rem; /* Even more spacing on small screens */
    }
}

/* Very small screens */
@media (max-width: 375px) {
    .chat-messages {
        margin-bottom: 8rem; /* Maximum spacing on very small screens */
    }
}

.chat-input-container:focus-within {
    box-shadow:
        0 2px 6px rgba(0, 0, 0, 0.3),
        0 4px 8px rgba(0, 0, 0, 0.2),
        0 6px 12px rgba(0, 0, 0, 0.1),
        0 -4px 8px rgba(0, 0, 0, 0.15), /* Reduced upward shadow */
        inset 0 1px 2px rgba(255, 255, 255, 0.1);
}

.chat-input-container:not(:focus-within) {
    /* Shadow is now handled by the main .chat-input-container style */
}


.chat-input {
    flex-grow: 1;
    width: 100%; /* Full width since send button is now in footer */
    background-color: transparent; /* Changed to transparent to blend with container */
    font-size: clamp(1.2rem, 2.5vw, 0.8rem);
    color: #ccc;
    border: none;
    padding: 8px 10px; /* Minimal padding for compact appearance */
    padding-left: 16px;
    outline: none;
    border-radius: 18px; /* More rounded to match container */
    margin-right: 0; /* No need for margin since send button is now in footer */
    margin-bottom: 4px; /* Added bottom margin */
    min-width: 0;
    resize: none; /* Prevent manual resizing */
    overflow-y: auto; /* Enable scrolling for content that exceeds max height */
    line-height: 1.5; /* Consistent line height */
    max-height: 96px; /* Max height for 4 lines (24px line height × 4) */
    min-height: 24px; /* Min height for 1 line */
    display: block; /* Ensure proper display */
    font-family: inherit; /* Match the font of the rest of the app */
    box-shadow: none; /* Removed inner shadow to blend better */
    transition: box-shadow 0.2s ease;
    
    /* Hide scrollbar but keep functionality */
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
}

.chat-input:focus {
    box-shadow: none; /* No shadow when focused to maintain blended look */
}

/* Hide scrollbar for Chrome, Safari and Opera */
.chat-input::-webkit-scrollbar {
    display: none;
}

.send-button {
  background-color: #ff9800;
  color: white;
  border: none;
  padding: 9px;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.2s ease;
  height: 44px;
  width: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  /* margin-bottom: 0px; */
  margin-right: -1px;
  /* margin-left: 0px; */
  z-index: 101;
  box-shadow: 0 1px 2px rgba(31, 41, 55, 0.04),
              0 2px 4px rgba(255, 198, 112, 0.05),
              0 3px 6px rgba(31, 41, 55, 0.04),
              0 4px 8px rgba(255, 145, 77, 0.05);
  border: 1px solid rgba(204, 215, 230, 0.8);
  margin-top: -29px; /* Better alignment with dropdown */
}

.send-button:hover {
  background-color: #e68a00;
}

.send-button svg {
  font-size: 1.2rem;
}

/* Settings Modal */
.settings-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
  z-index: 100;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 0.3s ease;
}

/* Settings Content */
.settings-content {
  background-color: #ffffff;
  border-radius: 20px;
  box-shadow:
    0 10px 30px rgba(0, 0, 0, 0.2),
    0 5px 15px rgba(0, 0, 0, 0.1),
    0 0 1px rgba(0, 0, 0, 0.1);
  color: #333;
  width: calc(100% - 40px);
  max-width: 480px;
  transition: all 0.3s cubic-bezier(0.19, 1, 0.22, 1);
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: 0.95rem;
  overflow: hidden;
  animation: modalSlideIn 0.3s cubic-bezier(0.19, 1, 0.22, 1);
  position: relative;
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: translate(-50%, -45%);
  }
  to {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
}

.settings-content {
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.settings-content h3 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 8px;
  letter-spacing: -0.01em;
}

.settings-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.input-group {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.input-group label {
  font-weight: 600;
  font-size: 0.9rem;
  color: #555;
  margin-left: 4px;
  letter-spacing: 0.01em;
}

.input-group input,
.input-group select {
  padding: 12px 16px;
  border-radius: 12px;
  background-color: #f8f8f8;
  color: #333;
  border: 1px solid #e0e0e0;
  box-shadow:
    0 1px 2px rgba(0, 0, 0, 0.04),
    inset 0 1px 0 rgba(255, 255, 255, 0.8);
  transition: all 0.2s ease;
  font-size: 0.95rem;
  font-family: inherit;
}

.input-group input:focus,
.input-group select:focus {
  outline: none;
  border-color: #ff9800;
  background-color: #fff;
  box-shadow:
    0 0 0 3px rgba(255, 152, 0, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.8);
}

.button-group {
  display: flex;
  gap: 12px;
  margin-top: 16px;
}

.button-group button {
  background-color: #ff9800;
  color: white;
  border: none;
  padding: 12px 16px;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.2s ease;
  flex: 1;
  font-size: 0.95rem;
  box-shadow:
    0 1px 3px rgba(255, 152, 0, 0.3),
    0 1px 2px rgba(0, 0, 0, 0.1);
  letter-spacing: 0.01em;
}

.button-group button:hover {
  transform: translateY(-2px);
  background-color: #f57c00;
  box-shadow:
    0 4px 12px rgba(255, 152, 0, 0.3),
    0 2px 6px rgba(0, 0, 0, 0.1);
}

.button-group button:active {
  transform: translateY(0);
  background-color: #ef6c00;
  box-shadow:
    0 1px 2px rgba(255, 152, 0, 0.3),
    0 1px 1px rgba(0, 0, 0, 0.1);
}

.close-button {
  background-color: #f2f2f2;
  color: #666;
  border: none;
  padding: 12px 16px;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.2s ease;
  width: 100%;
  font-size: 0.95rem;
  margin-top: 8px;
  box-shadow:
    0 1px 3px rgba(0, 0, 0, 0.1),
    0 1px 2px rgba(0, 0, 0, 0.05);
  letter-spacing: 0.01em;
}

.close-button:hover {
  background-color: #e6e6e6;
  color: #555;
  transform: translateY(-2px);
  box-shadow:
    0 4px 12px rgba(0, 0, 0, 0.1),
    0 2px 6px rgba(0, 0, 0, 0.05);
}

.close-button:active {
  transform: translateY(0);
  background-color: #ddd;
  box-shadow:
    0 1px 2px rgba(0, 0, 0, 0.1),
    0 1px 1px rgba(0, 0, 0, 0.05);
}

@media (max-width: 480px) {
  .settings-modal {
    width: calc(100% - 24px);
    max-width: 100%;
  }
  
  .settings-content {
    padding: 20px;
  }
  
  .button-group {
    flex-direction: column;
  }
  
  .button-group button,
  .close-button {
    padding: 14px 16px;
  }
}

/* Error Message */
.error-message {
  color: #ff3b30;
  padding: 10px;
  text-align: center;
}

/* File Upload Styles */
.file-upload-container {
  display: flex;
  align-items: center;
  position: relative;
  margin-right: auto; /* Push to the left side */
  margin-left: 4px; /* Add a small margin from the left edge */
  margin-bottom: 4px; /* Add bottom margin */
}

.file-upload-button {
  background: transparent;
  border: none;
  color: #777;
  cursor: pointer;
  padding: 4px 8px 6px; /* Added bottom padding */
  border-radius: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  height: 28px;
  margin-top: 2px; /* Adjust vertical alignment */
}

.file-upload-button svg {
  font-size: 1.05rem; /* Slightly more subtle icon size */
}

.file-upload-button:hover {
  background-color: rgba(255, 255, 255, 0.05);
  color: #aaa;
}

.uploaded-file {
  display: flex;
  align-items: center;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 4px 8px;
  margin-right: 8px;
}

.file-name {
  color: #dedede;
  font-size: 0.85rem;
  max-width: 120px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.file-icon {
  margin-right: 4px;
  font-size: 1rem;
}

.remove-file-button {
  background: transparent;
  border: none;
  color: #999;
  cursor: pointer;
  padding: 4px;
  margin-left: 4px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.remove-file-button:hover {
  color: #ff3b30;
}

.upload-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-top: 2px solid #ffffff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  position: absolute;
  right: -8px;
  top: 50%;
  transform: translateY(-50%);
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* File error message styling */
.file-error-message {
  background-color: rgba(255, 59, 48, 0.1);
  color: #ff3b30;
  padding: 8px 12px;
  border-radius: 8px;
  margin-bottom: 8px;
  font-size: 0.9rem;
  text-align: center;
  animation: fadeIn 0.3s ease;
  position: absolute;
  bottom: 100%;
  left: 0;
  right: 0;
  margin-bottom: 8px;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Add indicator for messages with attachments */
.user-message.has-attachment {
  position: relative;
  padding-top: 30px; /* Increased padding to make room for the filename */
}

.user-message.has-attachment::before {
  content: '';
  position: absolute;
  top: 8px;
  right: 8px;
  width: 16px;
  height: 16px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23555' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48'%3E%3C/path%3E%3C/svg%3E");
  background-size: contain;
  background-repeat: no-repeat;
  opacity: 0.8;
  z-index: 5;
}

/* Add file name display for messages with attachments */
.user-message.has-attachment::after {
  content: attr(data-attachment-name);
  position: absolute;
  top: 8px;
  right: 28px;
  font-size: 0.8rem;
  font-weight: 500;
  color: #555;
  max-width: 200px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  opacity: 1;
  z-index: 5;
  display: block !important; /* Force display */
}

.image-preview {
  position: fixed;
  bottom: 100px; /* Position above the input container */
  left: 50%;
  transform: translateX(-50%);
  margin-bottom: 16px;
  background-color: #2a2a2a;
  border-radius: 8px;
  padding: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  z-index: 40; /* Higher z-index to appear above other elements */
}

.preview-image {
  max-width: 150px;
  max-height: 100px;
  border-radius: 4px;
}

/* Footer */
.footer {
  background-color: #eee;
  padding: 10px;
  text-align: center;
  font-size: 0.8rem;
  color: #888;
  box-shadow: 0px -2px 4px rgba(0, 0, 0, 0.25);
}

.copy-message {
  position: fixed;
  bottom: 120px;   /* Moved up a bit to be above the input area */
  left: 50%;
  transform: translateX(-50%);
  background: rgba(255, 152, 0, 0.95);
  color: white;
  padding: 16px 32px;
  border-radius: 50px;
  font-size: 1.4rem;
  z-index: 9999;  /* Much higher z-index */
  transition: all 0.3s cubic-bezier(.25,.8,.25,1);
  box-shadow: 0 1px 1px rgba(255, 198, 112, 0.08),
              0 2px 2px rgba(255, 198, 112, 0.08),
              0 4px 4px rgba(255, 145, 77, 0.08),
              0 8px 8px rgba(255, 145, 77, 0.08);
  pointer-events: none; /* Let clicks pass through */
}

@media (max-width: 768px) {
  .copy-message {
    width: calc(100% - 40px);
    text-align: center;
  }
}






/* Dark mode styles for user message attachments */
.user-message.has-attachment::before {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23dedede' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48'%3E%3C/path%3E%3C/svg%3E");
}

.user-message.has-attachment::after {
  color: #dedede;
  font-weight: 600;
  display: block !important;
}

/* Dark Theme Overrides */
body {
  background-color: #121212; /* Changed from #000000 to very dark gray */
  background-image:
    radial-gradient(circle at 20% 30%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 20%),
    radial-gradient(circle at 70% 60%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 20%),
    radial-gradient(circle at 40% 80%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 30%),
    radial-gradient(circle at 80% 10%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 30%),
    radial-gradient(circle at 10% 90%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 20%),
    radial-gradient(circle at 90% 80%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 20%),
    radial-gradient(circle at 30% 20%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 30%),
    radial-gradient(circle at 60% 40%, rgba(30, 30, 30, 0.3) 0%, rgba(30, 30, 30, 0) 30%);
  color: #e5e5e5;
}

/* Header styles are now unified for both light and dark themes */
/* The header now uses rgba colors with transparency that work well in both themes */

.user-message {
  background: #2a2a2a;
  color: #f0f0f0;
  box-shadow:
    0 1px 2px rgba(0, 0, 0, 0.2),
    0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.03);
}

.user-message:hover {
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.25),
    0 4px 12px rgba(0, 0, 0, 0.15);
}

.assistant-message {
  background: #1e1e1e;
  color: #f0f0f0;
  border: 1px solid rgba(255, 255, 255, 0.03);
  box-shadow:
    0 1px 2px rgba(0, 0, 0, 0.2),
    0 2px 8px rgba(0, 0, 0, 0.1);
  /* margin-bottom is inherited from the main styles */
}

.assistant-message:hover {
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.25),
    0 4px 12px rgba(0, 0, 0, 0.15);
}

.chat-messages::-webkit-scrollbar-thumb {
  background: #111111;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
  background: #1a1a1a;
}

.chat-messages {
  scrollbar-color: #111111 transparent;
}

.message-actions-container {
  background-color: rgba(26, 26, 26, 0.95);
  backdrop-filter: blur(4px);
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.2),
    0 4px 12px rgba(0, 0, 0, 0.15),
    0 8px 24px rgba(0, 0, 0, 0.1),
    0 0 0 1px rgba(0, 0, 0, 0.3);
  border-left: 2px solid rgba(59, 130, 246, 0.3); /* Subtle hint of blue */
  background-image: linear-gradient(to right, rgba(30, 30, 30, 0.8), rgba(26, 26, 26, 0.95));
  /* No need to override position properties as they're inherited from the main styles */
  /* z-index is inherited from the main styles */
  pointer-events: auto !important; /* Ensure clicks are registered */
}

/* Ensure the assistant message doesn't clip the action buttons in dark mode */
.assistant-message {
  overflow: visible !important;
}

.message-actions-container:hover {
  transform: translateY(-2px);
  box-shadow:
    0 4px 8px rgba(0, 0, 0, 0.3),
    0 8px 16px rgba(0, 0, 0, 0.2),
    0 0 0 1px rgba(0, 0, 0, 0.3);
}

.copy-button,
.retry-button {
  background-color: rgba(42, 42, 42, 0.9);
  border: none;
  box-shadow:
    0 2px 4px rgba(0, 0, 0, 0.2),
    0 4px 8px rgba(0, 0, 0, 0.1),
    0 0 0 1px rgba(0, 0, 0, 0.3);
}

.copy-button::before {
  background: radial-gradient(circle at top left, rgba(236, 72, 153, 0.2), transparent 70%);
}

.retry-button::before {
  background: radial-gradient(circle at top right, rgba(125, 211, 252, 0.2), transparent 70%);
}

.copy-button::after,
.retry-button::after {
  background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
}

.copy-button:hover,
.retry-button:hover {
  background-color: #333333;
  transform: translateY(-2px);
  box-shadow:
    0 4px 8px rgba(0, 0, 0, 0.3),
    0 8px 16px rgba(0, 0, 0, 0.2),
    0 0 0 1px rgba(0, 0, 0, 0.3);
}

.copy-button:hover::after,
.retry-button:hover::after {
  opacity: 0.3;
}

.copy-button svg,
.retry-button svg {
  color: #dedede;
}

.typing-indicator::before {
  background: #1a1a1a;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
}

.typing-indicator span {
  background: #ffffff;
}

/* Chat input container styles are now unified for both light and dark themes */
/* The container now uses rgba colors with transparency that work well in both themes */

.chat-input {
  background-color: transparent; /* Changed to transparent to blend with container */
  color: #dedede;
  /* Other properties are inherited from the main styles */
}

.chat-input::placeholder {
  color: #999;
}

/* Dark mode styles for custom dropdown */
.dropdown-toggle {
  background-color: transparent;
  margin: 0;
  color: #777;
  padding: 4px 10px 6px; /* Match file upload button padding */
  text-align: center;
  min-width: 150px; /* Reduced min-width */
}

.dropdown-toggle:hover {
  background-color: rgba(255, 255, 255, 0.05);
  color: #aaa;
}

.dropdown-menu {
  background-color: #2a2a2a;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.dropdown-item {
  color: #dedede;
}

.dropdown-item:hover {
  background-color: #3a3a3a;
}

.dropdown-item.active {
  background-color: #3a3a3a;
}

.send-button {
  background-color: #ffffff;
  color: #000000;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  border: none;
}

.send-button:hover {
  background-color: #e0e0e0;
  box-shadow: 0 4px 15px rgba(255, 255, 255, 0.1);
}

/* Dark mode settings modal */
.settings-modal {
  background-color: rgba(0, 0, 0, 0.7);
}

/* Dark mode settings content */
.settings-content {
  background-color: #1e1e1e;
  box-shadow:
    0 10px 30px rgba(0, 0, 0, 0.4),
    0 5px 15px rgba(0, 0, 0, 0.3),
    0 0 1px rgba(255, 255, 255, 0.05);
  color: #e0e0e0;
}

.settings-content h3 {
  color: #f0f0f0;
}

.input-group label {
  color: #aaa;
}

.input-group input,
.input-group select {
  background-color: #2a2a2a;
  color: #e0e0e0;
  border: 1px solid #333;
  box-shadow:
    0 1px 2px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.05);
}

.input-group input:focus,
.input-group select:focus {
  border-color: #ff9800;
  background-color: #333;
  box-shadow:
    0 0 0 3px rgba(255, 152, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.05);
}

.button-group button {
  background-color: #ff9800;
  color: #fff;
  box-shadow:
    0 1px 3px rgba(0, 0, 0, 0.3),
    0 1px 2px rgba(0, 0, 0, 0.2);
}

.button-group button:hover {
  background-color: #f57c00;
  box-shadow:
    0 4px 12px rgba(0, 0, 0, 0.3),
    0 2px 6px rgba(0, 0, 0, 0.2);
}

.button-group button:active {
  background-color: #ef6c00;
}

.close-button {
  background-color: #333;
  color: #ccc;
  box-shadow:
    0 1px 3px rgba(0, 0, 0, 0.3),
    0 1px 2px rgba(0, 0, 0, 0.2);
}

.close-button:hover {
  background-color: #444;
  color: #ddd;
  box-shadow:
    0 4px 12px rgba(0, 0, 0, 0.3),
    0 2px 6px rgba(0, 0, 0, 0.2);
}

.close-button:active {
  background-color: #3a3a3a;
}

.copy-message {
  background: rgba(255, 255, 255, 0.9);
  color: #000000;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
}

================
File: src/main.jsx
================
ReactDOM.createRoot(document.getElementById('root')).render(

================
File: src/utils/config.js
================
/**
 * Configuration utility.
 *
 * This file handles loading and providing access to the default configuration settings.
 *
 * Related files:
 * - src/App.jsx: Uses this utility to initialize default settings.
 * - public/config.json: The file containing the default configuration.
 *
 * For an overview of all project files, see `src/FILE_MAP.md`.
 */
⋮----
export const getDefaultSettings = () => {
console.log('Default settings loaded:', config);

================
File: src/utils/error.js
================
export const handleApiError = (error, source) => {
console.error(`API Error in ${source}:`, error);
// Consider adding more robust error handling here, such as displaying a user-friendly error message.

================
File: src/utils/message.js
================
/**
 * Message utility functions.
 * Provides helper functions for handling message content.
 *
 * For an overview of all project files, see `src/FILE_MAP.md`.
 */
⋮----
export const getSafeMessageContent = (content) => {
⋮----
const stringContent = JSON.stringify(content, null, 2); // Format for readability
⋮----
console.error("Error stringifying message content:", error);
⋮----
} else if (content) { // Check if content is not null or undefined but not a string or object
return <span>{String(content)}</span>;
⋮----
return null; // Or a placeholder like <span>No content</span>

================
File: src/utils/message.jsx
================
export const getSafeMessageContent = (content) => { // Ensure getSafeMessageContent is exported
⋮----
const stringContent = JSON.stringify(content, null, 2);
⋮----
console.error("Error stringifying message content:", error);
⋮----
return <span>{String(content)}</span>;

================
File: vite.config.js
================
export default defineConfig({
plugins: [react()],
⋮----
allowedHosts: ['chat.sadoway.ca']  // Replace with your domain



================================================================
End of Codebase
================================================================
